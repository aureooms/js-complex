"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = compile;

var _core = require("./core");

var _core2 = _interopRequireDefault(_core);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function compile(_ref, symbol) {
	var add = _ref.add,
	    sub = _ref.sub,
	    mul = _ref.mul,
	    div = _ref.div,
	    div2 = _ref.div2,
	    div2n = _ref.div2n,
	    neg = _ref.neg,
	    sqrt = _ref.sqrt,
	    pow2 = _ref.pow2,
	    PI = _ref.PI,
	    cos = _ref.cos,
	    sin = _ref.sin,
	    atan2 = _ref.atan2,
	    parse = _ref.parse,
	    stringify = _ref.stringify,
	    $0 = _ref.$0,
	    $1 = _ref.$1,
	    $_1 = _ref.$_1,
	    eq0 = _ref.eq0,
	    eq1 = _ref.eq1,
	    eq_1 = _ref.eq_1,
	    gt0 = _ref.gt0;


	var _mul = _core2.default.mul(mul, add, sub);

	return {

		"$0": _core2.default.$0($0),
		"$1": _core2.default.$1($0, $1),
		"root2n": _core2.default.root2n(cos, sin, PI, div2n),
		"iroot2n": _core2.default.iroot2n(cos, sin, PI, div2n, neg),
		"add": _core2.default.add(add),
		"sub": _core2.default.sub(sub),
		"mul": _mul,
		"imul": _mul,
		"div": _core2.default.div(div, pow2, mul, add, sub),
		"div2": _core2.default.div2(div2),
		"abs": _core2.default.abs(sqrt, pow2, add),
		"arg": _core2.default.arg(atan2),
		"con": _core2.default.con(neg),
		"parse": _core2.default.parse(parse, $0, $1, $_1, symbol),
		"stringify": _core2.default.stringify(stringify, eq0, eq1, eq_1, gt0, symbol)

	};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jYXJ0ZXNpYW4va2VybmVsL2NvbXBpbGUuanMiXSwibmFtZXMiOlsiY29tcGlsZSIsInN5bWJvbCIsImFkZCIsInN1YiIsIm11bCIsImRpdiIsImRpdjIiLCJkaXYybiIsIm5lZyIsInNxcnQiLCJwb3cyIiwiUEkiLCJjb3MiLCJzaW4iLCJhdGFuMiIsInBhcnNlIiwic3RyaW5naWZ5IiwiJDAiLCIkMSIsIiRfMSIsImVxMCIsImVxMSIsImVxXzEiLCJndDAiLCJfbXVsIiwicm9vdDJuIiwiaXJvb3QybiIsImFicyIsImFyZyIsImNvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxPOztBQUZ4Qjs7Ozs7O0FBRWUsU0FBU0EsT0FBVCxPQVdYQyxNQVhXLEVBV0Y7QUFBQSxLQVRaQyxHQVNZLFFBVFpBLEdBU1k7QUFBQSxLQVROQyxHQVNNLFFBVE5BLEdBU007QUFBQSxLQVRBQyxHQVNBLFFBVEFBLEdBU0E7QUFBQSxLQVRNQyxHQVNOLFFBVE1BLEdBU047QUFBQSxLQVJaQyxJQVFZLFFBUlpBLElBUVk7QUFBQSxLQVJMQyxLQVFLLFFBUkxBLEtBUUs7QUFBQSxLQVBaQyxHQU9ZLFFBUFpBLEdBT1k7QUFBQSxLQU5aQyxJQU1ZLFFBTlpBLElBTVk7QUFBQSxLQU5MQyxJQU1LLFFBTkxBLElBTUs7QUFBQSxLQUxaQyxFQUtZLFFBTFpBLEVBS1k7QUFBQSxLQUxQQyxHQUtPLFFBTFBBLEdBS087QUFBQSxLQUxEQyxHQUtDLFFBTERBLEdBS0M7QUFBQSxLQUxLQyxLQUtMLFFBTEtBLEtBS0w7QUFBQSxLQUpaQyxLQUlZLFFBSlpBLEtBSVk7QUFBQSxLQUpKQyxTQUlJLFFBSkpBLFNBSUk7QUFBQSxLQUhaQyxFQUdZLFFBSFpBLEVBR1k7QUFBQSxLQUhQQyxFQUdPLFFBSFBBLEVBR087QUFBQSxLQUhGQyxHQUdFLFFBSEZBLEdBR0U7QUFBQSxLQUZaQyxHQUVZLFFBRlpBLEdBRVk7QUFBQSxLQUZOQyxHQUVNLFFBRk5BLEdBRU07QUFBQSxLQUZBQyxJQUVBLFFBRkFBLElBRUE7QUFBQSxLQUZPQyxHQUVQLFFBRk9BLEdBRVA7OztBQUVaLEtBQU1DLE9BQU8sZUFBS3BCLEdBQUwsQ0FBVUEsR0FBVixFQUFnQkYsR0FBaEIsRUFBc0JDLEdBQXRCLENBQWI7O0FBRUEsUUFBTzs7QUFFTixRQUFPLGVBQUtjLEVBQUwsQ0FBU0EsRUFBVCxDQUZEO0FBR04sUUFBTyxlQUFLQyxFQUFMLENBQVNELEVBQVQsRUFBY0MsRUFBZCxDQUhEO0FBSU4sWUFBVyxlQUFLTyxNQUFMLENBQWFiLEdBQWIsRUFBbUJDLEdBQW5CLEVBQXlCRixFQUF6QixFQUE4QkosS0FBOUIsQ0FKTDtBQUtOLGFBQVksZUFBS21CLE9BQUwsQ0FBY2QsR0FBZCxFQUFvQkMsR0FBcEIsRUFBMEJGLEVBQTFCLEVBQStCSixLQUEvQixFQUF1Q0MsR0FBdkMsQ0FMTjtBQU1OLFNBQVEsZUFBS04sR0FBTCxDQUFVQSxHQUFWLENBTkY7QUFPTixTQUFRLGVBQUtDLEdBQUwsQ0FBVUEsR0FBVixDQVBGO0FBUU4sU0FBUXFCLElBUkY7QUFTTixVQUFTQSxJQVRIO0FBVU4sU0FBUSxlQUFLbkIsR0FBTCxDQUFVQSxHQUFWLEVBQWdCSyxJQUFoQixFQUF1Qk4sR0FBdkIsRUFBNkJGLEdBQTdCLEVBQW1DQyxHQUFuQyxDQVZGO0FBV04sVUFBUyxlQUFLRyxJQUFMLENBQVdBLElBQVgsQ0FYSDtBQVlOLFNBQVEsZUFBS3FCLEdBQUwsQ0FBVWxCLElBQVYsRUFBaUJDLElBQWpCLEVBQXdCUixHQUF4QixDQVpGO0FBYU4sU0FBUSxlQUFLMEIsR0FBTCxDQUFVZCxLQUFWLENBYkY7QUFjTixTQUFRLGVBQUtlLEdBQUwsQ0FBVXJCLEdBQVYsQ0FkRjtBQWVOLFdBQVUsZUFBS08sS0FBTCxDQUFZQSxLQUFaLEVBQW9CRSxFQUFwQixFQUF5QkMsRUFBekIsRUFBOEJDLEdBQTlCLEVBQW9DbEIsTUFBcEMsQ0FmSjtBQWdCTixlQUFjLGVBQUtlLFNBQUwsQ0FBaUJBLFNBQWpCLEVBQTZCSSxHQUE3QixFQUFtQ0MsR0FBbkMsRUFBeUNDLElBQXpDLEVBQWdEQyxHQUFoRCxFQUFzRHRCLE1BQXREOztBQWhCUixFQUFQO0FBb0JBIiwiZmlsZSI6ImNvbXBpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29yZSBmcm9tICcuL2NvcmUnIDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGlsZSAoIHtcblxuXHRhZGQgLCBzdWIgLCBtdWwgLCBkaXYgLFxuXHRkaXYyICwgZGl2Mm4gLFxuXHRuZWcgLFxuXHRzcXJ0ICwgcG93MiAsXG5cdFBJICwgY29zICwgc2luICwgYXRhbjIgLFxuXHRwYXJzZSAsIHN0cmluZ2lmeSAsXG5cdCQwICwgJDEgLCAkXzEgLFxuXHRlcTAgLCBlcTEgLCBlcV8xICwgZ3QwXG5cbn0gLCBzeW1ib2wgKSB7XG5cblx0Y29uc3QgX211bCA9IGNvcmUubXVsKCBtdWwgLCBhZGQgLCBzdWIgKSA7XG5cblx0cmV0dXJuIHtcblxuXHRcdFwiJDBcIiA6IGNvcmUuJDAoICQwICkgLFxuXHRcdFwiJDFcIiA6IGNvcmUuJDEoICQwICwgJDEgKSAsXG5cdFx0XCJyb290Mm5cIiA6IGNvcmUucm9vdDJuKCBjb3MgLCBzaW4gLCBQSSAsIGRpdjJuICkgLFxuXHRcdFwiaXJvb3QyblwiIDogY29yZS5pcm9vdDJuKCBjb3MgLCBzaW4gLCBQSSAsIGRpdjJuICwgbmVnICkgLFxuXHRcdFwiYWRkXCIgOiBjb3JlLmFkZCggYWRkICkgLFxuXHRcdFwic3ViXCIgOiBjb3JlLnN1Yiggc3ViICkgLFxuXHRcdFwibXVsXCIgOiBfbXVsICxcblx0XHRcImltdWxcIiA6IF9tdWwgLFxuXHRcdFwiZGl2XCIgOiBjb3JlLmRpdiggZGl2ICwgcG93MiAsIG11bCAsIGFkZCAsIHN1YiApICxcblx0XHRcImRpdjJcIiA6IGNvcmUuZGl2MiggZGl2MiApICxcblx0XHRcImFic1wiIDogY29yZS5hYnMoIHNxcnQgLCBwb3cyICwgYWRkICkgLFxuXHRcdFwiYXJnXCIgOiBjb3JlLmFyZyggYXRhbjIgKSAsXG5cdFx0XCJjb25cIiA6IGNvcmUuY29uKCBuZWcgKSAsXG5cdFx0XCJwYXJzZVwiIDogY29yZS5wYXJzZSggcGFyc2UgLCAkMCAsICQxICwgJF8xICwgc3ltYm9sICkgLFxuXHRcdFwic3RyaW5naWZ5XCIgOiBjb3JlLnN0cmluZ2lmeSAoIHN0cmluZ2lmeSAsIGVxMCAsIGVxMSAsIGVxXzEgLCBndDAgLCBzeW1ib2wgKVxuXG5cdH0gO1xuXG59XG5cbiJdfQ==