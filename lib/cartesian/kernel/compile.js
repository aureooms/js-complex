"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = compile;

var _core = require("./core");

var _core2 = _interopRequireDefault(_core);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function compile(_ref, symbol) {
	var add = _ref.add,
	    sub = _ref.sub,
	    mul = _ref.mul,
	    div = _ref.div,
	    div2 = _ref.div2,
	    div2n = _ref.div2n,
	    neg = _ref.neg,
	    sqrt = _ref.sqrt,
	    pow2 = _ref.pow2,
	    exp = _ref.exp,
	    loge = _ref.loge,
	    PI = _ref.PI,
	    cos = _ref.cos,
	    sin = _ref.sin,
	    atan2 = _ref.atan2,
	    parse = _ref.parse,
	    stringify = _ref.stringify,
	    $0 = _ref.$0,
	    $1 = _ref.$1,
	    $_1 = _ref.$_1,
	    eq0 = _ref.eq0,
	    eq1 = _ref.eq1,
	    eq_1 = _ref.eq_1,
	    gt0 = _ref.gt0;


	var _mul = _core2.default.mul(mul, add, sub);
	var _exp = _core2.default.exp(exp, cos, sin, mul);
	var _abs = _core2.default.abs(sqrt, pow2, add);
	var _arg = _core2.default.arg(atan2);

	return {

		"$0": _core2.default.$0($0),
		"$1": _core2.default.$1($0, $1),
		"root2n": _core2.default.root2n(cos, sin, PI, div2n),
		"iroot2n": _core2.default.iroot2n(cos, sin, PI, div2n, neg),
		"add": _core2.default.add(add),
		"sub": _core2.default.sub(sub),
		"mul": _mul,
		"imul": _mul,
		"div": _core2.default.div(div, pow2, mul, add, sub),
		"div2": _core2.default.div2(div2),
		"abs": _abs,
		"arg": _arg,
		"con": _core2.default.con(neg),
		"parse": _core2.default.parse(parse, $0, $1, $_1, symbol),
		"stringify": _core2.default.stringify(stringify, eq0, eq1, eq_1, gt0, symbol),
		"exp": _exp,
		"pow": _core2.default.pow(_exp, _abs, _arg, loge, mul, sub, add)

	};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jYXJ0ZXNpYW4va2VybmVsL2NvbXBpbGUuanMiXSwibmFtZXMiOlsiY29tcGlsZSIsInN5bWJvbCIsImFkZCIsInN1YiIsIm11bCIsImRpdiIsImRpdjIiLCJkaXYybiIsIm5lZyIsInNxcnQiLCJwb3cyIiwiZXhwIiwibG9nZSIsIlBJIiwiY29zIiwic2luIiwiYXRhbjIiLCJwYXJzZSIsInN0cmluZ2lmeSIsIiQwIiwiJDEiLCIkXzEiLCJlcTAiLCJlcTEiLCJlcV8xIiwiZ3QwIiwiX211bCIsIl9leHAiLCJfYWJzIiwiYWJzIiwiX2FyZyIsImFyZyIsInJvb3QybiIsImlyb290Mm4iLCJjb24iLCJwb3ciXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUV3QkEsTzs7QUFGeEI7Ozs7OztBQUVlLFNBQVNBLE9BQVQsT0FZWEMsTUFaVyxFQVlGO0FBQUEsS0FWWkMsR0FVWSxRQVZaQSxHQVVZO0FBQUEsS0FWTkMsR0FVTSxRQVZOQSxHQVVNO0FBQUEsS0FWQUMsR0FVQSxRQVZBQSxHQVVBO0FBQUEsS0FWTUMsR0FVTixRQVZNQSxHQVVOO0FBQUEsS0FUWkMsSUFTWSxRQVRaQSxJQVNZO0FBQUEsS0FUTEMsS0FTSyxRQVRMQSxLQVNLO0FBQUEsS0FSWkMsR0FRWSxRQVJaQSxHQVFZO0FBQUEsS0FQWkMsSUFPWSxRQVBaQSxJQU9ZO0FBQUEsS0FQTEMsSUFPSyxRQVBMQSxJQU9LO0FBQUEsS0FQRUMsR0FPRixRQVBFQSxHQU9GO0FBQUEsS0FOWkMsSUFNWSxRQU5aQSxJQU1ZO0FBQUEsS0FMWkMsRUFLWSxRQUxaQSxFQUtZO0FBQUEsS0FMUEMsR0FLTyxRQUxQQSxHQUtPO0FBQUEsS0FMREMsR0FLQyxRQUxEQSxHQUtDO0FBQUEsS0FMS0MsS0FLTCxRQUxLQSxLQUtMO0FBQUEsS0FKWkMsS0FJWSxRQUpaQSxLQUlZO0FBQUEsS0FKSkMsU0FJSSxRQUpKQSxTQUlJO0FBQUEsS0FIWkMsRUFHWSxRQUhaQSxFQUdZO0FBQUEsS0FIUEMsRUFHTyxRQUhQQSxFQUdPO0FBQUEsS0FIRkMsR0FHRSxRQUhGQSxHQUdFO0FBQUEsS0FGWkMsR0FFWSxRQUZaQSxHQUVZO0FBQUEsS0FGTkMsR0FFTSxRQUZOQSxHQUVNO0FBQUEsS0FGQUMsSUFFQSxRQUZBQSxJQUVBO0FBQUEsS0FGT0MsR0FFUCxRQUZPQSxHQUVQOzs7QUFFWixLQUFNQyxPQUFPLGVBQUt0QixHQUFMLENBQVVBLEdBQVYsRUFBZ0JGLEdBQWhCLEVBQXNCQyxHQUF0QixDQUFiO0FBQ0EsS0FBTXdCLE9BQU8sZUFBS2hCLEdBQUwsQ0FBVUEsR0FBVixFQUFnQkcsR0FBaEIsRUFBc0JDLEdBQXRCLEVBQTRCWCxHQUE1QixDQUFiO0FBQ0EsS0FBTXdCLE9BQU8sZUFBS0MsR0FBTCxDQUFVcEIsSUFBVixFQUFpQkMsSUFBakIsRUFBd0JSLEdBQXhCLENBQWI7QUFDQSxLQUFNNEIsT0FBTyxlQUFLQyxHQUFMLENBQVVmLEtBQVYsQ0FBYjs7QUFFQSxRQUFPOztBQUVOLFFBQU8sZUFBS0csRUFBTCxDQUFTQSxFQUFULENBRkQ7QUFHTixRQUFPLGVBQUtDLEVBQUwsQ0FBU0QsRUFBVCxFQUFjQyxFQUFkLENBSEQ7QUFJTixZQUFXLGVBQUtZLE1BQUwsQ0FBYWxCLEdBQWIsRUFBbUJDLEdBQW5CLEVBQXlCRixFQUF6QixFQUE4Qk4sS0FBOUIsQ0FKTDtBQUtOLGFBQVksZUFBSzBCLE9BQUwsQ0FBY25CLEdBQWQsRUFBb0JDLEdBQXBCLEVBQTBCRixFQUExQixFQUErQk4sS0FBL0IsRUFBdUNDLEdBQXZDLENBTE47QUFNTixTQUFRLGVBQUtOLEdBQUwsQ0FBVUEsR0FBVixDQU5GO0FBT04sU0FBUSxlQUFLQyxHQUFMLENBQVVBLEdBQVYsQ0FQRjtBQVFOLFNBQVF1QixJQVJGO0FBU04sVUFBU0EsSUFUSDtBQVVOLFNBQVEsZUFBS3JCLEdBQUwsQ0FBVUEsR0FBVixFQUFnQkssSUFBaEIsRUFBdUJOLEdBQXZCLEVBQTZCRixHQUE3QixFQUFtQ0MsR0FBbkMsQ0FWRjtBQVdOLFVBQVMsZUFBS0csSUFBTCxDQUFXQSxJQUFYLENBWEg7QUFZTixTQUFRc0IsSUFaRjtBQWFOLFNBQVFFLElBYkY7QUFjTixTQUFRLGVBQUtJLEdBQUwsQ0FBVTFCLEdBQVYsQ0FkRjtBQWVOLFdBQVUsZUFBS1MsS0FBTCxDQUFZQSxLQUFaLEVBQW9CRSxFQUFwQixFQUF5QkMsRUFBekIsRUFBOEJDLEdBQTlCLEVBQW9DcEIsTUFBcEMsQ0FmSjtBQWdCTixlQUFjLGVBQUtpQixTQUFMLENBQWlCQSxTQUFqQixFQUE2QkksR0FBN0IsRUFBbUNDLEdBQW5DLEVBQXlDQyxJQUF6QyxFQUFnREMsR0FBaEQsRUFBc0R4QixNQUF0RCxDQWhCUjtBQWlCTixTQUFRMEIsSUFqQkY7QUFrQk4sU0FBUSxlQUFLUSxHQUFMLENBQVVSLElBQVYsRUFBaUJDLElBQWpCLEVBQXdCRSxJQUF4QixFQUErQmxCLElBQS9CLEVBQXNDUixHQUF0QyxFQUE0Q0QsR0FBNUMsRUFBa0RELEdBQWxEOztBQWxCRixFQUFQO0FBc0JBIiwiZmlsZSI6ImNvbXBpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29yZSBmcm9tICcuL2NvcmUnIDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGlsZSAoIHtcblxuXHRhZGQgLCBzdWIgLCBtdWwgLCBkaXYgLFxuXHRkaXYyICwgZGl2Mm4gLFxuXHRuZWcgLFxuXHRzcXJ0ICwgcG93MiAsIGV4cCAsXG5cdGxvZ2UgLFxuXHRQSSAsIGNvcyAsIHNpbiAsIGF0YW4yICxcblx0cGFyc2UgLCBzdHJpbmdpZnkgLFxuXHQkMCAsICQxICwgJF8xICxcblx0ZXEwICwgZXExICwgZXFfMSAsIGd0MFxuXG59ICwgc3ltYm9sICkge1xuXG5cdGNvbnN0IF9tdWwgPSBjb3JlLm11bCggbXVsICwgYWRkICwgc3ViICkgO1xuXHRjb25zdCBfZXhwID0gY29yZS5leHAoIGV4cCAsIGNvcyAsIHNpbiAsIG11bCApIDtcblx0Y29uc3QgX2FicyA9IGNvcmUuYWJzKCBzcXJ0ICwgcG93MiAsIGFkZCApIDtcblx0Y29uc3QgX2FyZyA9IGNvcmUuYXJnKCBhdGFuMiApIDtcblxuXHRyZXR1cm4ge1xuXG5cdFx0XCIkMFwiIDogY29yZS4kMCggJDAgKSAsXG5cdFx0XCIkMVwiIDogY29yZS4kMSggJDAgLCAkMSApICxcblx0XHRcInJvb3QyblwiIDogY29yZS5yb290Mm4oIGNvcyAsIHNpbiAsIFBJICwgZGl2Mm4gKSAsXG5cdFx0XCJpcm9vdDJuXCIgOiBjb3JlLmlyb290Mm4oIGNvcyAsIHNpbiAsIFBJICwgZGl2Mm4gLCBuZWcgKSAsXG5cdFx0XCJhZGRcIiA6IGNvcmUuYWRkKCBhZGQgKSAsXG5cdFx0XCJzdWJcIiA6IGNvcmUuc3ViKCBzdWIgKSAsXG5cdFx0XCJtdWxcIiA6IF9tdWwgLFxuXHRcdFwiaW11bFwiIDogX211bCAsXG5cdFx0XCJkaXZcIiA6IGNvcmUuZGl2KCBkaXYgLCBwb3cyICwgbXVsICwgYWRkICwgc3ViICkgLFxuXHRcdFwiZGl2MlwiIDogY29yZS5kaXYyKCBkaXYyICkgLFxuXHRcdFwiYWJzXCIgOiBfYWJzICxcblx0XHRcImFyZ1wiIDogX2FyZyAsXG5cdFx0XCJjb25cIiA6IGNvcmUuY29uKCBuZWcgKSAsXG5cdFx0XCJwYXJzZVwiIDogY29yZS5wYXJzZSggcGFyc2UgLCAkMCAsICQxICwgJF8xICwgc3ltYm9sICkgLFxuXHRcdFwic3RyaW5naWZ5XCIgOiBjb3JlLnN0cmluZ2lmeSAoIHN0cmluZ2lmeSAsIGVxMCAsIGVxMSAsIGVxXzEgLCBndDAgLCBzeW1ib2wgKSAsXG5cdFx0XCJleHBcIiA6IF9leHAgLFxuXHRcdFwicG93XCIgOiBjb3JlLnBvdyggX2V4cCAsIF9hYnMgLCBfYXJnICwgbG9nZSAsIG11bCAsIHN1YiAsIGFkZCApICxcblxuXHR9IDtcblxufVxuXG4iXX0=